{"version":3,"sources":["Header.jsx","CoffeCard.jsx","constants.js","Content.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","typographyStyles","flex","Header","classes","AppBar","position","Toolbar","Typography","className","CoffeCard","props","avatarUrl","title","subtitle","description","imageUrl","Card","CardHeader","avatar","Avatar","src","action","IconButton","aria-label","subheader","CardMedia","style","height","image","CardContent","variant","component","CardActions","Button","size","price","Content","Grid","container","spacing","coffeMakerList","map","coffeMakerObj","item","xs","sm","getCoffeMakerCard","App","direction","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAKMA,EAAYC,aAAW,iBAAO,CAClCC,iBAAkB,CAChBC,KAAM,OAkBKC,EAdA,WACb,IAAMC,EAAUL,IAChB,OACE,kBAACM,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,UAAWL,EAAQH,kBAA/B,oBAGA,kBAAC,IAAD,S,iFCoBOS,EA5BG,SAAAC,GAAU,IAClBC,EAAsDD,EAAtDC,UAAWC,EAA2CF,EAA3CE,MAAOC,EAAoCH,EAApCG,SAAUC,EAA0BJ,EAA1BI,YAAaC,EAAaL,EAAbK,SACjD,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,OAAQ,kBAACC,EAAA,EAAD,CAAQC,IAAKT,IACrBU,OACE,kBAACC,EAAA,EAAD,CAAYC,aAAW,YACrB,kBAAC,IAAD,OAGJX,MAAOA,EACPY,UAAWX,IAEb,kBAACY,EAAA,EAAD,CAAWC,MAAO,CAAEC,OAAQ,SAAWC,MAAOb,IAC9C,kBAACc,EAAA,EAAD,KACE,kBAACtB,EAAA,EAAD,CAAYuB,QAAQ,QAAQC,UAAU,KACnCjB,IAGL,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAAb,WACA,kBAACD,EAAA,EAAD,CAAQC,KAAK,SAAb,YCjCO,GACb,CACEtB,MAAO,eACPuB,MAAO,UACPrB,YACE,iJACFH,UACE,sEACFI,SACE,gFAEJ,CACEH,MAAO,uBACPuB,MAAO,SACPrB,YACE,2EACFH,UACE,+EACFI,SACE,gFAEJ,CACEH,MAAO,0BACPuB,MAAO,SACPrB,YACE,2PACFH,UACE,+EACFI,SACE,gFAEJ,CACEH,MAAO,sBACPuB,MAAO,SACPrB,YACE,4JACFH,UACE,+EACFI,SACE,gFAEJ,CACEH,MAAO,+BACPuB,MAAO,SACPrB,YACE,wOACFH,UACE,+EACFI,SACE,gFAEJ,CACEH,MAAO,0CACPuB,MAAO,SACPrB,YACE,oIACFH,UACE,+EACFI,SACE,iFCtCSqB,EAhBC,WASd,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACtBC,EAAeC,KAAI,SAAAC,GAAa,OAVX,SAAAA,GACxB,OACE,kBAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,EAAcH,IAOoBI,CAAkBJ,QCM9CK,EAjBH,WACV,OACE,kBAACV,EAAA,EAAD,CAAMC,WAAS,EAACU,UAAU,UACxB,kBAACX,EAAA,EAAD,CAAMM,MAAI,GACR,kBAAC,EAAD,OAEF,kBAACN,EAAA,EAAD,CAAMM,MAAI,EAACL,WAAS,GAClB,kBAACD,EAAA,EAAD,CAAMM,MAAI,EAACC,IAAI,EAAOC,GAAI,IAC1B,kBAACR,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,EAAD,OAEF,kBAACR,EAAA,EAAD,CAAMM,MAAI,EAACC,IAAI,EAAOC,GAAI,OCJdI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a4fe1ef4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\r\nimport AcUnitRoundedIcon from \"@material-ui/icons/AcUnitRounded\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  typographyStyles: {\r\n    flex: 1\r\n  }\r\n}));\r\n\r\nconst Header = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography className={classes.typographyStyles}>\r\n          Anthony sistilli\r\n        </Typography>\r\n        <AcUnitRoundedIcon />\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ShareIcon from \"@material-ui/icons/Share\";\r\nimport { Avatar, IconButton, CardMedia } from \"@material-ui/core\";\r\n\r\nconst CoffeCard = props => {\r\n  const { avatarUrl, title, subtitle, description, imageUrl } = props;\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        avatar={<Avatar src={avatarUrl} />}\r\n        action={\r\n          <IconButton aria-label=\"settings\">\r\n            <ShareIcon />\r\n          </IconButton>\r\n        }\r\n        title={title}\r\n        subheader={subtitle}\r\n      />\r\n      <CardMedia style={{ height: \"150px\" }} image={imageUrl} />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          {description}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button size=\"small\">BUY NOW</Button>\r\n        <Button size=\"small\">OFFER</Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CoffeCard;\r\n","export default [\r\n  {\r\n    title: \"Keurig K-Duo\",\r\n    price: \"$149.99\",\r\n    description:\r\n      \"Use both ground coffee and k-cup pods. Multiple brew sizes: brew an 8, 10, or 12-cup carafe and an 237, 296, or 355ml (8, 10, or 12 oz. ) cup \",\r\n    avatarUrl:\r\n      \"https://upload.wikimedia.org/wikipedia/commons/e/e0/Keurig_Logo.png\",\r\n    imageUrl:\r\n      \"https://images-na.ssl-images-amazon.com/images/I/61-KUPluVYL._AC_SL1500_.jpg\"\r\n  },\r\n  {\r\n    title: \"KRUPS Electric Spice\",\r\n    price: \"$19.99\",\r\n    description:\r\n      \"Large grinding capacity yields ground coffee for up to 12 cups of coffee\",\r\n    avatarUrl:\r\n      \"https://images-na.ssl-images-amazon.com/images/I/81CbxNLCHCL._AC_SL1500_.jpg\",\r\n    imageUrl:\r\n      \"https://images-na.ssl-images-amazon.com/images/I/71FhMLBP9XL._AC_SL1500_.jpg\"\r\n  },\r\n  {\r\n    title: \"Hamilton Beach Flexbrew\",\r\n    price: \"$89.99\",\r\n    description:\r\n      \"No two coffee drinkers are the same â€“ so, the flexibility to customize how and what you brew is key. From fresh grounds to K-Cup pods, the Hamilton Beach FlexBrew 2-Way Coffee Maker gives you the options to please fans of all types of coffees.\",\r\n    avatarUrl:\r\n      \"https://images-na.ssl-images-amazon.com/images/I/81mjh5ZSu1L._AC_SL1500_.jpg\",\r\n    imageUrl:\r\n      \"https://images-na.ssl-images-amazon.com/images/I/818rz3CIaFL._AC_SL1500_.jpg\"\r\n  },\r\n  {\r\n    title: \"Secura French Press\",\r\n    price: \"$36.48\",\r\n    description:\r\n      \"3-layered Stainless steel filter traps the smallest coffee grounds to produce an exceptional full-bodied flavor, filter is easy to disassemble and clean.\",\r\n    avatarUrl:\r\n      \"https://images-na.ssl-images-amazon.com/images/I/61u76aiQQsL._AC_SL1000_.jpg\",\r\n    imageUrl:\r\n      \"https://images-na.ssl-images-amazon.com/images/I/61XRMmXVwQL._AC_SL1500_.jpg\"\r\n  },\r\n  {\r\n    title: \"Cafe Du Chateau French Press\",\r\n    price: \"$32.95\",\r\n    description:\r\n      \"We use double stainless steel screen filters on a durable plunger supported by a spring loaded base plate to seal the edges, followed by a final top lid strainer to give you a pure brew with no grounds unlike other cheap presses.\",\r\n    avatarUrl:\r\n      \"https://images-na.ssl-images-amazon.com/images/I/81BdxpiRtCL._AC_SL1500_.jpg\",\r\n    imageUrl:\r\n      \"https://images-na.ssl-images-amazon.com/images/I/81luUhz7ZlL._AC_SL1500_.jpg\"\r\n  },\r\n  {\r\n    title: \"LIVINGbasics Single Serve Coffee Maker \",\r\n    price: \"$37.99\",\r\n    description:\r\n      'Brew with a single serve k-cup pod or ground coffee. Less than 14 cm (5.5\") wide slim design, its the perfect size for any space.',\r\n    avatarUrl:\r\n      \"https://images-na.ssl-images-amazon.com/images/I/61PGHBLkl8L._AC_SL1500_.jpg\",\r\n    imageUrl:\r\n      \"https://images-na.ssl-images-amazon.com/images/I/61KBB8K1wDL._AC_SL1000_.jpg\"\r\n  }\r\n];\r\n","import React from \"react\";\r\nimport CoffeCard from \"./CoffeCard\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport coffeMakerList from \"./constants\";\r\n\r\nconst Content = () => {\r\n  const getCoffeMakerCard = coffeMakerObj => {\r\n    return (\r\n      <Grid item xs={12} sm={4}>\r\n        <CoffeCard {...coffeMakerObj} />\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      {coffeMakerList.map(coffeMakerObj => getCoffeMakerCard(coffeMakerObj))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport Header from \"./Header\";\nimport Content from \"./Content\";\n\nconst App = () => {\n  return (\n    <Grid container direction=\"column\">\n      <Grid item>\n        <Header />\n      </Grid>\n      <Grid item container>\n        <Grid item xs={false} sm={2} />\n        <Grid item xs={12} sm={8}>\n          <Content />\n        </Grid>\n        <Grid item xs={false} sm={2} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}